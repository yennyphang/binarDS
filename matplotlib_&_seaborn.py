# -*- coding: utf-8 -*-
"""matplotlib & seaborn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_AZArjMvxh8IZLyztzmb5DTw9IfGuahm
"""

import matplotlib as mpl
import matplotlib.pyplot as plt



pip install matplotlib

plt.plot ([1,2,3,4],[1,4,9,16])
plt.title ("first plot")
plt.xlabel ("X lable")
plt.ylabel ("Y lable")
plt.show()

division = ["Div A", "Div B", "Div C", " Div D", " Div E"]
division_average_marks =[70,82,73,60,87]

plt.bar(division, division_average_marks,color='purple')
plt.title ("Bar Graph")
plt.xlabel ("division")
plt.ylabel ("marks")
plt.show()

division = ["Div A", "Div B", "Div C", " Div D", " Div E"]
division_average_marks =[70,82,73,60,87] 
Explode=[0,0.1,0,0,0 ]

plt.pie(division_average_marks, explode=Explode, labels=division, shadow=True ,startangle=90)
plt.axis ('equal')
plt.legend ('title = list of division')
plt.show()

x=np.random.randn (1000)
plt.title("Histogram")
plt.xlabel("Random data")
plt.ylabel("Frequency")
plt.hist(x,5)
plt.show()

import numpy as np

height =np.array([167,170,149,165,155,180,166,146,159,185,145,168,172,181,169])
weight =np.array ([86,74,66,78,68,79,90,73,70,88,66,84,67,84,77])

plt.xlim(140,200)
plt.ylim(60,100)
plt.scatter(height,weight)
plt.title("scatter plot")
plt.xlabel("height")
plt.ylabel("weight")
plt.show()

import seaborn as sns

tips =sns.load_dataset("tips")
tips.head()

sns.scatterplot(data=tips,x="total_bill",y="tip")

sns.scatterplot(data=tips,x="total_bill",y="tip", hue="time")

sns.scatterplot(data=tips,x="total_bill",y="tip",style="time")

sns.scatterplot(data=tips,x="total_bill",y="tip",hue="day",style="time")

sns.scatterplot(data=tips,x="total_bill",y="tip",hue="size")

sns.scatterplot(data=tips,x="total_bill",y="tip",hue="size",palette='deep')

tip_rate= tips.eval("tip/total_bill").rename("tip_rate")
sns.scatterplot(data=tips, x="total_bill", y="tip", hue=tip_rate)

import numpy as np
np.random.seed(0)
import seaborn as sns
sns.set_theme()
data = np.random.rand(10,12)
sns.heatmap(data)

ax= sns.heatmap(data,vmin=0,vmax=1 )

data= np.random.randn(10,12)
ax=sns.heatmap(data, center=0)

flights= sns.load_dataset("flights")
flights= flights.pivot("month", "year", "passengers")
ax= sns.heatmap(flights)

ax= sns.heatmap(flights,annot=True, fmt="d")

ax= sns.heatmap(flights, linewidths=.5,annot=True, fmt="d")

ax= sns.heatmap(flights, cmap="YlGnBu")

ax=sns.heatmap(flights, center=flights.loc["Jan", 1956])

data = np.random.randn(50,20)
ax= sns.heatmap(data, xticklabels=2, yticklabels=False)

grid_kws={"height_ratios":(.9,.05), "hspace": .3}
f,(ax,cbar_ax)= plt.subplots(2, gridspec_kw=grid_kws) 
ax=sns.heatmap(flights,ax=ax,
               cbar_ax= cbar_ax,
               cbar_kws={"orientation": "horizontal"})

corr = np.corrcoef(np.random.randn(10,200))
mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)]= True
with sns.axes_style("white"):
 f,ax =plt.subplots(figsize=(7,5))
 ax = sns.heatmap(corr, mask-mask, vmax=.3,square=True)

import pandas as pd

import numpy
print(numpy.__file__)

import numpy as np
np.zeros

import numpy
numpy.random.randn

penguins = sns.load_dataset("penguins") 
penguins

sns.histplot(data=penguins, x="flipper_length_mm")

sns.histplot(data=penguins, y="flipper_length_mm")

sns.histplot(data=penguins, y="flipper_length_mm",binwidth=3)

sns.histplot(data=penguins, x="flipper_length_mm", kde=True)

sns.histplot(data=penguins)

sns.histplot(data=penguins,x="flipper_length_mm",hue="species" )

sns.histplot(data=penguins,x="flipper_length_mm",hue="species",element="step" )

sns.histplot(data=penguins,x="flipper_length_mm",hue="species",element="poly" )

sns.histplot(penguins, x="bill_depth_mm", y="body_mass_g",hue="species")





import seaborn as sns

!pip install -U seaborn

sns.set_theme(style="whitegrid")
tips = sns.load_dataset("tips")
ax=sns.barplot(x="day", y="total_bill",data=tips)

ax=sns.barplot(x="day",y="total_bill", hue="sex", data=tips)

ax=sns.barplot(y="day",x="total_bill", hue="sex", data=tips)

ax=sns.barplot(x="time",y="tip", data=tips,order=["Dinner","Lunch"])

from numpy import median
ax= sns.barplot(x="day",y="tip",data=tips,estimator=median)

tips["weeekend"]=tips["day"].isin({"sat","sun"})
ax=sns.barplot(x="day",y="total_bill",hue="weekend",data=tips, dodge=False)